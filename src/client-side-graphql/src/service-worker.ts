/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
import { GraphQLConfig } from './services/graphql-api-service';
import { createStore, get, set } from 'idb-keyval';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});


// Return cached response when possible, and fetch new results from server in
// the background and update the cache.
self.addEventListener('fetch', async (event) => {
  const { request } = event;
  if (new URL(request.url).origin === GraphQLConfig.host && request.method === 'POST') {
    event.respondWith(customStaleWhileRevalidate(request));
  }
});

async function customStaleWhileRevalidate(request: Request): Promise<any> {
  const cachedResponse = await getCache(request.clone());
  const fetchPromise = fetch(request.clone())
    .then((response) => {
      setCache(request.clone(), response.clone());
      return response;
    })
    .catch((err) => {
      console.error(err);
    });
  return cachedResponse ? Promise.resolve(cachedResponse) : fetchPromise;
}

async function serializeResponse(response: Response) {
  const serializedHeaders: any = {};
  for (const entry of Object.entries(response.headers)) {
    serializedHeaders[entry[0]] = entry[1];
  }
  const serialized: any = {
    headers: serializedHeaders,
    status: response.status,
    statusText: response.statusText
  };
  serialized.body = await response.json();
  return serialized;
}


const CacheKey = 'graphql-api-cache';
const graphQlCacheStore = createStore(CacheKey, 'GraphQLPostResponses');

async function setCache(request: Request, response: Response) {
  const body = await request.json();
  // const id = await crypto.subtle.digest("SHA-1", new TextEncoder().encode(body.query));
  const id = `${body.operationName}-${JSON.stringify(body.variables)}`;

  const entry = {
    query: body.query,
    response: await serializeResponse(response),
    timestamp: Date.now()
  };
  await set(id, entry, graphQlCacheStore);
}

async function getCache(request: Request) {
  let data;
  try {
    const body = await request.json();
    // const id = await crypto.subtle.digest("SHA-1", new TextEncoder().encode(body.query));
    const id = `${body.operationName}-${JSON.stringify(body.variables)}`;
    data = await get(id, graphQlCacheStore);
    if (!data) {
      return null;
    }
    return new Response(JSON.stringify(data.response.body), data.response);
  } catch (err) {
    return null;
  }
}